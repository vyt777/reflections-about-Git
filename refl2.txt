What happens when you initialize a repository? Why do you need to do it?
- git init creates a new repository. It creates .git directory with some metadata info, it is needed for future commiting and tracking history of commits of the project.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- the staging area is like the area for preparing files which will be committed. It offer the possibility to make changes and do some experimental work until there are well-prepared files for making a commitment.

How can you use the staging area to make sure you have one commit per logical change?
- You can (should) check staging area every time before committing to see what are the differencies between staging area and the last commit by "git diff --staged".

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- branches are helpful when you need do some xperiments with your code and simultaneously you want to keep your actual working code in unchanged state. So you can do as many versions as you want and you always can see the forking point.

How do the diagrams help you visualize the branch structure?
- The diagram using by "git log --graph --oneline" help visualize the tree of code evolution. On that tree you can see forking points and sequence of steps.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- the result of merging two branches together is that all commits from one branch is added to another (master) branch and then it represents as single branch. We represent it in the diagram because it is a good way to visualize the evolution of code and its forking and merging points.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- Well the pros are that git automatically merging branches and doing it when it is a basic and simple cases, so it is fast way to do some tedious work. Another pro is that git leave difficult cases (conflicts of codes) on the programmers decision because git can't resolve it by itself. Maybe you can say that this is a con but right now git is not capable of be smart enough to do this in automatic way so I guess this is a good feature anyway.

